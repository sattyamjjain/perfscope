[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pycallmeter"
version = "1.0.0"
description = "ðŸš€ The Ultimate Python Performance Profiler & APM Tool - Production-Ready Performance Monitoring, Memory Tracking, Call Tree Analysis & Bottleneck Detection for Django, Flask, FastAPI, Async Applications, Data Science & Machine Learning"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Sattyam Jain", email = "sattyamjain@example.com"},
]
maintainers = [
    {name = "Sattyam Jain", email = "sattyamjain@example.com"},
]
classifiers = [
    # Development Status
    "Development Status :: 5 - Production/Stable",
    
    # Intended Audience
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators", 
    "Intended Audience :: Information Technology",
    "Intended Audience :: Science/Research",
    
    
    # Operating Systems
    "Operating System :: OS Independent",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: MacOS",
    
    # Programming Language
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
    
    # Topics - Core Functionality
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Debuggers",
    "Topic :: Software Development :: Profilers",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    
    # Topics - System & Performance
    "Topic :: System :: Monitoring",
    "Topic :: System :: Systems Administration",
    "Topic :: System :: Benchmark",
    "Topic :: System :: Logging",
    
    # Topics - Web Development  
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    
    # Topics - Scientific Computing
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Information Analysis",
    
    # Framework Classification
    "Framework :: AsyncIO",
    "Framework :: Django",
    "Framework :: Flask",
    
    # Environment
    "Environment :: Web Environment",
    "Environment :: Console",
    
    # Natural Language
    "Natural Language :: English",
    
    # Typing
    "Typing :: Typed",
]
keywords = [
    # Core Profiling Terms
    "profiling", "profiler", "performance", "monitoring", "apm", "application-performance-monitoring",
    "debugging", "tracing", "instrumentation", "analytics", "metrics", "benchmarking",
    
    # Memory & Resource Monitoring
    "memory", "memory-profiling", "memory-leak", "memory-usage", "memory-tracking", "gc", "garbage-collection",
    "resource-monitoring", "cpu-profiling", "cpu-usage", "resource-usage",
    
    # Python Async & Concurrency
    "async", "asyncio", "await", "concurrent", "threading", "multiprocessing", "coroutine",
    
    # Web Frameworks
    "django", "flask", "fastapi", "starlette", "tornado", "bottle", "pyramid", "web-framework",
    "wsgi", "asgi", "web-application", "api", "rest-api", "microservices",
    
    # Data Science & ML
    "data-science", "machine-learning", "ml", "ai", "artificial-intelligence", "deep-learning",
    "numpy", "pandas", "scipy", "sklearn", "tensorflow", "pytorch", "jupyter",
    
    # Development & DevOps
    "development", "devops", "ci-cd", "testing", "quality-assurance", "optimization",
    "performance-optimization", "performance-analysis", "bottleneck", "bottleneck-detection",
    
    # Visualization & Reporting
    "visualization", "reporting", "call-tree", "call-graph", "html-report", "json-export",
    "dashboard", "charts", "graphs", "statistics",
    
    # Production & Enterprise
    "production", "enterprise", "scalability", "reliability", "observability", "telemetry",
    "logs", "logging", "structured-logging", "zero-dependencies", "lightweight",
    
    # Function Analysis
    "function-calls", "call-stack", "execution-time", "runtime-analysis", "code-profiling",
    "performance-testing", "load-testing", "stress-testing"
]
requires-python = ">=3.8"
dependencies = []

[project.optional-dependencies]
# Enhanced memory tracking with system-level monitoring
full = [
    "psutil>=5.9.0",  # System and process monitoring for enhanced memory tracking
]

# Complete development environment
dev = [
    # Testing Framework
    "pytest>=7.4.0",           # Modern testing framework
    "pytest-cov>=4.1.0",       # Coverage reporting
    "pytest-asyncio>=0.21.0",  # Async testing support
    "pytest-benchmark>=4.0.0", # Performance benchmarking
    "pytest-xdist>=3.3.0",     # Parallel test execution
    
    # Enhanced Memory Tracking
    "psutil>=5.9.0",           # System monitoring
    
    # Code Quality & Formatting
    "ruff>=0.1.0",             # Fast Python linter
    "black>=23.7.0",           # Code formatter
    "isort>=5.12.0",           # Import sorter
    
    # Type Checking
    "mypy>=1.5.0",             # Static type checker
    "types-psutil>=5.9.0",     # Type stubs for psutil
    
    # Documentation
    "mkdocs>=1.5.0",           # Documentation generator
    "mkdocs-material>=9.0.0",  # Material theme for docs
    
    # Build & Distribution
    "build>=0.10.0",           # Build system
    "twine>=4.0.0",            # PyPI uploading
    
    # Development Utilities
    "pre-commit>=3.0.0",       # Git hooks
    "tox>=4.0.0",              # Testing in multiple environments
]

# Web framework integrations
web = [
    "django>=3.2",             # Django framework support
    "flask>=2.0.0",            # Flask framework support  
    "fastapi>=0.100.0",        # FastAPI framework support
    "starlette>=0.27.0",       # ASGI framework support
    "aiohttp>=3.8.0",          # Async HTTP client/server
]

# Data science and ML profiling
science = [
    "numpy>=1.21.0",           # Numerical computing
    "pandas>=1.5.0",           # Data analysis
    "matplotlib>=3.5.0",       # Plotting for report visualization
    "jupyter>=1.0.0",          # Jupyter notebook support
]

# All optional dependencies
all = [
    "psutil>=5.9.0",
    "django>=3.2", 
    "flask>=2.0.0",
    "fastapi>=0.100.0",
    "numpy>=1.21.0",
    "pandas>=1.5.0",
    "matplotlib>=3.5.0",
]

[project.urls]
Homepage = "https://github.com/sattyamjain/pycallmeter"
Documentation = "https://github.com/sattyamjain/pycallmeter#readme"
Repository = "https://github.com/sattyamjain/pycallmeter.git"
"Source Code" = "https://github.com/sattyamjain/pycallmeter"
"Bug Tracker" = "https://github.com/sattyamjain/pycallmeter/issues"
"Issue Tracker" = "https://github.com/sattyamjain/pycallmeter/issues"
"Feature Requests" = "https://github.com/sattyamjain/pycallmeter/issues/new?template=feature_request.md"
"Bug Reports" = "https://github.com/sattyamjain/pycallmeter/issues/new?template=bug_report.md"
"Changelog" = "https://github.com/sattyamjain/pycallmeter/releases"
"Download" = "https://pypi.org/project/pycallmeter/"
"PyPI" = "https://pypi.org/project/pycallmeter/"
"Funding" = "https://github.com/sponsors/sattyamjain"
"Discussions" = "https://github.com/sattyamjain/pycallmeter/discussions"

[tool.setuptools]
package-dir = {"" = "src"}
packages = ["pycallmeter"]

[tool.setuptools.package-data]
pycallmeter = ["py.typed"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = ["-v", "--tb=short"]

[tool.ruff]
line-length = 100
target-version = "py38"

[tool.ruff.lint]
select = ["E", "F", "W", "I", "N", "B", "UP"]
ignore = ["E501"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true